{"openapi":"3.0.0","servers":[{"description":"Production server","url":"https://freddy.codesubmit.io"}],"info":{"version":"1.0.0","title":"Sweet Tooth API","description":"# Introduction\nThe **Sweet Tooth API** helps you manage candy orders in the *Sweet Tooth* candy shop.\n## Main features\nWith this API, you can login to your account and view your dashboard and orders. Use the production server `https://freddy.codesubmit.io` for all requests.\n## HTTP Requests\nThe Sweet Tooth API uses standard HTTP requests, summarized in the following list:\n- **POST**: Creates new resources\n  - *Used here to receive an `access_token` and a `refresh_token`*\n\n- **GET**: Retrieves a representation of a resource\n  - *Used here to fetch the data from the user dashboard and the list of\n  orders*\n\n## HTTP Responses\nThe API supports standard HTTP response status codes including error codes, summarized in the following list:\n- **200**: The request is processed without issues\n  - *Returned when generating a JSON Web Token or fetching the dashboard and\n  orders*\n  \n- **401**: The request is unauthorized\n  - *Returned when a user attempts to log in or access protected resources\n   with incorrect credentials or with an expired token*\n\n## Authorization\nThe Sweet Tooth API uses basic authentication to log in and *JWT* ([JSON Web Token](https://jwt.io/introduction)) to access protected resources.\nInclude the JSON Web Token in an authorization header in your request in the following format: `Authorization: Bearer <token>`.\n## How to use the request samples\nEach request includes request samples in multiple languages to help you get started with the Sweet Tooth API. The samples contain *placeholder values* in capital letters in *snake_case* *(for example, `REPLACE_BEARER_TOKEN`), which you must replace with the appropriate values."},"tags":[{"name":"account access","description":"Grant access to the user's account using JWT"},{"name":"shop","description":"Display the user's dashboard and order details"}],"paths":{"/login":{"post":{"operationId":"getAccessTokens","description":"Allows you to log in with username and password. The endpoint returns **two** tokens (JSON Web Tokens)â€”one `access_token`, valid for 15 minutes, and one `refresh_token`, valid for 30 days.\n\nNote that the credentials are sent in the **request body** and **not** in an authorization header, which is the more common basic authorization method.","summary":"Login and receive `access_token`","tags":["account access"],"security":[{"basicAuth":[]}],"requestBody":{"description":"Contains a username and password.","content":{"application/json":{"schema":{"required":["username","password"],"properties":{"username":{"description":"The username of the user.","type":"string","example":"freddy"},"password":{"description":"The password of the user.","type":"string","format":"password","example":"ElmStreet2019"}}}}}},"responses":{"200":{"$ref":"#/components/responses/LoginTokens"},"400":{"$ref":"#/components/responses/BadRequest"},"401":{"$ref":"#/components/responses/CredentialError"}},"x-codeSamples":[{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://freddy.codesubmit.io/login',\n  headers: {'content-type': 'application/json', Authorization: 'Basic REPLACE_BASIC_AUTH'},\n  body: {username: 'freddy', password: 'ElmStreet2019'},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://freddy.codesubmit.io/login \\\n  --header 'Authorization: Basic REPLACE_BASIC_AUTH' \\\n  --header 'content-type: application/json' \\\n  --data '{\"username\":\"freddy\",\"password\":\"ElmStreet2019\"}'"},{"lang":"Shell + Httpie","source":"echo '{\"username\":\"freddy\",\"password\":\"ElmStreet2019\"}' |  \\\n  http POST https://freddy.codesubmit.io/login \\\n  Authorization:'Basic REPLACE_BASIC_AUTH' \\\n  content-type:application/json"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"freddy.codesubmit.io\")\n\npayload = \"{\\\"username\\\":\\\"freddy\\\",\\\"password\\\":\\\"ElmStreet2019\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Basic REPLACE_BASIC_AUTH\"\n    }\n\nconn.request(\"POST\", \"/login\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://freddy.codesubmit.io/login\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"username\\\":\\\"freddy\\\",\\\"password\\\":\\\"ElmStreet2019\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Basic REPLACE_BASIC_AUTH\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://freddy.codesubmit.io/login');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Basic REPLACE_BASIC_AUTH'\n]);\n\n$request->setBody('{\"username\":\"freddy\",\"password\":\"ElmStreet2019\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"username\":\"freddy\",\"password\":\"ElmStreet2019\"}');\n\n$request->setRequestUrl('https://freddy.codesubmit.io/login');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Basic REPLACE_BASIC_AUTH'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"}]}},"/refresh":{"post":{"operationId":"refreshAccessToken","description":"Allows you to get a new `access_token` with the `refresh_token` you get from the `POST /login` operation. Include the `refresh_token` in an authorization header.","summary":"Refresh `access_token`","tags":["account access"],"security":[{"bearerAuth":[]}],"responses":{"200":{"$ref":"#/components/responses/RefreshAccess"},"401":{"$ref":"#/components/responses/Unauthorized"}},"x-codeSamples":[{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://freddy.codesubmit.io/refresh',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://freddy.codesubmit.io/refresh \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Shell + Httpie","source":"http POST https://freddy.codesubmit.io/refresh \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"freddy.codesubmit.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"POST\", \"/refresh\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://freddy.codesubmit.io/refresh\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://freddy.codesubmit.io/refresh');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://freddy.codesubmit.io/refresh');\n$request->setRequestMethod('POST');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"}]}},"/orders":{"get":{"operationId":"getOrders","description":"Contains details on orders made in the shop.\n\nYou can view *all* orders by omitting the query parameters in your request. You can filter the results with a case-insensitive search term, such as a product or customer name, and paginate the results in groups of *50*.\n\nMake sure to include your `access_token` as described in the introduction.","summary":"Get all orders","tags":["shop"],"security":[{"bearerAuth":[]}],"parameters":[{"name":"pageNumber","in":"query","description":"Current page number in the list of results.","example":1,"schema":{"type":"integer","format":"int32"}},{"name":"q","in":"query","description":"A search term to filter out the results.","example":"Chili","schema":{"type":"string"}}],"responses":{"200":{"$ref":"#/components/responses/OrdersList"},"401":{"$ref":"#/components/responses/Unauthorized"}},"x-codeSamples":[{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://freddy.codesubmit.io/orders',\n  qs: {pageNumber: 'SOME_INTEGER_VALUE', q: 'SOME_STRING_VALUE'},\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url 'https://freddy.codesubmit.io/orders?pageNumber=SOME_INTEGER_VALUE&q=SOME_STRING_VALUE' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Shell + Httpie","source":"http GET 'https://freddy.codesubmit.io/orders?pageNumber=SOME_INTEGER_VALUE&q=SOME_STRING_VALUE' \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"freddy.codesubmit.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/orders?pageNumber=SOME_INTEGER_VALUE&q=SOME_STRING_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://freddy.codesubmit.io/orders?pageNumber=SOME_INTEGER_VALUE&q=SOME_STRING_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://freddy.codesubmit.io/orders');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setQueryData([\n  'pageNumber' => 'SOME_INTEGER_VALUE',\n  'q' => 'SOME_STRING_VALUE'\n]);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://freddy.codesubmit.io/orders');\n$request->setRequestMethod('GET');\n$request->setQuery(new http\\QueryString([\n  'pageNumber' => 'SOME_INTEGER_VALUE',\n  'q' => 'SOME_STRING_VALUE'\n]));\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"}]}},"/dashboard":{"get":{"operationId":"getDashboard","description":"Returns the user's dashboard information, including a list of the bestselling items and an overview of the revenue for the preceding week and year.\n\nMake sure to include your `access_token` as described in the introduction.","summary":"Get the user's dashboard","tags":["shop"],"security":[{"bearerAuth":[]}],"responses":{"200":{"$ref":"#/components/responses/DashboardData"},"401":{"$ref":"#/components/responses/Unauthorized"}},"x-codeSamples":[{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://freddy.codesubmit.io/dashboard',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://freddy.codesubmit.io/dashboard \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Shell + Httpie","source":"http GET https://freddy.codesubmit.io/dashboard \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"freddy.codesubmit.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/dashboard\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://freddy.codesubmit.io/dashboard\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://freddy.codesubmit.io/dashboard');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://freddy.codesubmit.io/dashboard');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"}]}}},"components":{"schemas":{"Address":{"description":"The address of the customer.","type":"object","properties":{"city":{"description":"The city of the customer.","type":"string","example":"Chicago"},"street":{"description":"The street of the customer.","type":"string","example":"Hill Street"},"zipcode":{"description":"The postal code of the customer.","type":"integer","format":"int32","example":86392}}},"Customer":{"type":"object","description":"The information on one customer.","properties":{"address":{"$ref":"#/components/schemas/Address"},"id":{"description":"The ID of the customer in the shop.","type":"string","format":"uuid","example":"6aa91586-a567-aaef-c5e3-40e20f5a401c"},"name":{"description":"The first name of the customer.","type":"string","example":"Nina"},"surname":{"description":"The surname of the customer.","type":"string","example":"Rogers"}}},"Product":{"type":"object","description":"The information on one product.","properties":{"id":{"description":"The product ID.","type":"string","format":"uuid","example":"2f26ae71-78ec-243b-b022-417260cb1481"},"image":{"description":"A photo of the product.","type":"string","example":"https://images.unsplash.com/photo-1581053462058-9c89df7d26e9?crop=entropy&cs=tinysrgb&fit=crop&fm=jpg&h=500&ixid=MnwxfDB8MXxyYW5kb218MHx8Y2FuZHl8fHx8fHwxNjQwNjM1NjA3&ixlib=rb-1.2.1&q=80&utm_campaign=api-credit&utm_medium=referral&utm_source=unsplash_source&w=500"},"name":{"description":"The product name.","type":"string","example":"Starshine Avocado Leaf Dark Cherry Cotton Candy"}}},"OrderedProduct":{"allOf":[{"$ref":"#/components/schemas/Product"},{"type":"object","properties":{"quantity":{"description":"The quantity of this product included in the order.","type":"integer","format":"int32","example":"91"}}}]},"Orders":{"description":"All orders in the shop.","type":"object","properties":{"orders":{"type":"array","items":{"$ref":"#/components/schemas/Order"}}}},"Order":{"description":"Information on one order in the shop.","type":"object","properties":{"created_at":{"description":"Timestamp when the order was created.","type":"string","format":"date-time","example":"2023-08-12T00:39:18.938869"},"currency":{"description":"The currency the order was placed in.","type":"string","example":"$"},"customer":{"$ref":"#/components/schemas/Customer"},"id":{"description":"The order ID.","type":"string","format":"uuid","example":"6b402a24-add1-5eb1-d08b-d9880589a175"},"product":{"$ref":"#/components/schemas/OrderedProduct"},"status":{"description":"The status of the order.","type":"string","enum":["processing","shipped","delivered"],"example":"delivered"},"total":{"description":"The total amount of the order in the selected currency.","type":"integer","format":"int32","example":"8624"}}},"Bestseller":{"description":"The current bestselling products.","type":"object","properties":{"product":{"$ref":"#/components/schemas/Product"},"revenue":{"description":"The revenue generated by this product.","type":"integer","format":"int64","example":"2835702"},"units":{"description":"The number of product units sold.","type":"integer","format":"int32","example":"6178"}}},"TotalOrders":{"description":"The number of orders and the total monetary amount of these orders for the specific time window.","type":"object","properties":{"orders":{"description":"The number of orders created in this time window.","type":"integer","format":"int32","example":"330"},"total":{"description":"The total monetary value of the created orders.","type":"integer","format":"int64","example":"2952510"}}},"WeeklySales":{"description":"Sales over the preceding seven days, where each day is represented by an integer in order of least to most recent, with the number '7' referring to the preceding calendar day.","type":"object","properties":{"1":{"$ref":"#/components/schemas/TotalOrders"},"2":{"$ref":"#/components/schemas/TotalOrders"},"3":{"$ref":"#/components/schemas/TotalOrders"},"4":{"$ref":"#/components/schemas/TotalOrders"},"5":{"$ref":"#/components/schemas/TotalOrders"},"6":{"$ref":"#/components/schemas/TotalOrders"},"7":{"$ref":"#/components/schemas/TotalOrders"}}},"MonthlySales":{"description":"Sales over the preceding 12 months, where each month is represented by an integer in order of least to most recent, with the number '12' referring to the preceding calendar month.","type":"object","properties":{"1":{"$ref":"#/components/schemas/TotalOrders"},"2":{"$ref":"#/components/schemas/TotalOrders"},"3":{"$ref":"#/components/schemas/TotalOrders"},"4":{"$ref":"#/components/schemas/TotalOrders"},"5":{"$ref":"#/components/schemas/TotalOrders"},"6":{"$ref":"#/components/schemas/TotalOrders"},"7":{"$ref":"#/components/schemas/TotalOrders"},"8":{"$ref":"#/components/schemas/TotalOrders"},"9":{"$ref":"#/components/schemas/TotalOrders"},"10":{"$ref":"#/components/schemas/TotalOrders"},"11":{"$ref":"#/components/schemas/TotalOrders"},"12":{"$ref":"#/components/schemas/TotalOrders"}}}},"responses":{"LoginTokens":{"description":"Login successful.","content":{"application/json":{"schema":{"properties":{"access_token":{"description":"Token needed to access protected resources. Valid for 15 minutes.","type":"string","example":"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpYXQiOjE2NDkwODU2OTYsIm5iZiI6MTY0OTA4NTY5NiwianRpIjoiYjI0ZmYxNTQtNTI3MC00OTEyLWIxNDgtNmUzZTg5MzVjODFkIiwiZXhwIjoxNjQ5MDg2NTk2LCJpZGVudGl0eSI6ImZyZWRkeSIsImZyZXNoIjpmYWxzZSwidHlwZSI6ImFjY2VzcyJ9.6ZPvQJxfhuIYI-Eh61leU_55VtNl1H7uptmEtmu-01w"},"refresh_token":{"description":"Token used to refresh the `access_token`. Valid for 30 days.","type":"string","example":"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpYXQiOjE2NDkwODU2OTYsIm5iZiI6MTY0OTA4NTY5NiwianRpIjoiODM3NGJhNzktMjRlMi00N2IwLWFlNTktYjIyNzhjYWVhZjgwIiwiZXhwIjoxNjUxNjc3Njk2LCJpZGVudGl0eSI6ImZyZWRkeSIsInR5cGUiOiJyZWZyZXNoIn0.zOFY-9YyepEBgCoCF7ugR25xf2sazVSQ_m7nwM8uXe8"}}}}}},"RefreshAccess":{"description":"Refresh of `access_token` successful.","content":{"application/json":{"schema":{"properties":{"access_token":{"description":"Token needed to access protected resources. Valid for 15 minutes.","type":"string","example":"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpYXQiOjE2NDg5OTkyNTgsIm5iZiI6MTY0ODk5OTI1OCwianRpIjoiZDkyYTEwYjEtNjdmZi00NTUwLTlhZWItZDIzOTEzZTUwOTk1IiwiZXhwIjoxNjQ5MDAwMTU4LCJpZGVudGl0eSI6ImZyZWRkeSIsImZyZXNoIjpmYWxzZSwidHlwZSI6ImFjY2VzcyJ9.Qzp9ZVRNWbiO0Vd7rJV4cUMITCMJa-ESskNjjgNMH1M"}}}}}},"OrdersList":{"description":"Orders retrieved successfully.","content":{"application/json":{"schema":{"type":"array","maxItems":1000,"items":{"$ref":"#/components/schemas/Orders"}}}}},"DashboardData":{"description":"Dashboard data retrieved successfully.","content":{"application/json":{"schema":{"type":"object","properties":{"bestsellers":{"description":"The bestselling products, along with the number of units sold and the revenue per product.","type":"array","items":{"$ref":"#/components/schemas/Bestseller"}},"sales_over_time_week":{"$ref":"#/components/schemas/WeeklySales"},"sales_over_time_year":{"$ref":"#/components/schemas/MonthlySales"}}}}}},"BadRequest":{"description":"Incorrect request format.","content":{"application/json":{"schema":{"properties":{"message":{"description":"The error message.","type":"string","example":"Only supports Content-Type: json"}}}}}},"CredentialError":{"description":"Incorrect username or password provided.","content":{"application/json":{"schema":{"properties":{"msg":{"description":"The error message.","type":"string","example":"Bad credentials"}}}}}},"Unauthorized":{"description":"The `access_token` has expired.","content":{"application/json":{"schema":{"type":"object","properties":{"msg":{"description":"The `access_token` has expired.","type":"string","example":"Token has expired"}}}}}}},"securitySchemes":{"basicAuth":{"type":"http","scheme":"basic"},"bearerAuth":{"type":"http","scheme":"bearer","bearerFormat":"JWT"}}}}
